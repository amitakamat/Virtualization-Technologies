diff --git a/cmpe283/Makefile b/cmpe283/Makefile
new file mode 100644
index 000000000000..a6e798880dd3
--- /dev/null
+++ b/cmpe283/Makefile
@@ -0,0 +1,7 @@
+obj-m += cmpe283-1.o
+
+all:
+		make -C /lib/modules/$(shell uname -r)/build M=$(PWD) modules
+
+clean:
+		make -C /lib/modules/$(shell uname -r)/build M=$(PWD) clean
diff --git a/cmpe283/cmpe283-1.c b/cmpe283/cmpe283-1.c
new file mode 100644
index 000000000000..acf66471b6cc
--- /dev/null
+++ b/cmpe283/cmpe283-1.c
@@ -0,0 +1,354 @@
+/*  
+ *  cmpe283-1.c - Kernel module for CMPE283 assignment 1
+ */
+#include <linux/module.h>	/* Needed by all modules */
+#include <linux/kernel.h>	/* Needed for KERN_INFO */
+#include <asm/msr.h>
+
+#define MAX_MSG 80
+
+/*
+ * Model specific registers (MSRs) by the module.
+ * See SDM volume 4, section 2.1
+ */
+#define IA32_VMX_PINBASED_CTLS	0x481
+#define IA32_VMX_PROCBASED_CTLS	0x482
+#define IA32_VMX_PROCBASED_CTLS2 0x48B
+#define IA32_VMX_EXIT_CTLS 0x483
+#define IA32_VMX_ENTRY_CTLS 0x484
+
+
+/*
+ * Model specific register to determine if true controls are available.
+ *
+ */
+#define IA32_VMX_BASIC	0x480
+
+
+/*
+ * Model specific registers (MSRs) by the module (True controls).
+ * See SDM volume 4, section 2.2
+ */
+#define IA32_VMX_TRUE_PINBASED_CTLS	0x48D
+#define IA32_VMX_TRUE_PROCBASED_CTLS	0x48E
+#define IA32_VMX_TRUE_EXIT_CTLS 	0x48F
+#define IA32_VMX_TRUE_ENTRY_CTLS 	0x490
+
+
+/*
+ * struct capability_info
+ *
+ * Represents a single capability (bit number and description).
+ * Used by report_capability to output VMX capabilities.
+ */
+struct capability_info {
+	uint8_t bit;
+	const char *name;
+};
+
+
+/*
+ * Pinbased capabilities
+ * See SDM volume 3, section 24.6.1
+ */
+struct capability_info pinbased[5] =
+{
+	{ 0, "External Interrupt Exiting" },
+	{ 3, "NMI Exiting" },
+	{ 5, "Virtual NMIs" },
+	{ 6, "Activate VMX Preemption Timer" },
+	{ 7, "Process Posted Interrupts" }
+};
+
+/*
+ * Primary Processorbased capabilities
+ * See SDM volume 3, section 24.6.2
+ */
+struct capability_info primaryprocbased[21] = 
+{
+	{ 2, "Interrupt Window Exiting" },
+	{ 3, "Use TSC offsetting" },
+	{ 7, "HLT Exiting" },
+	{ 9, "INVLPG Exiting" },
+	{ 10, "MWAIT Exiting" },
+	{ 11, "RDPMC Exiting" },
+	{ 12, "RDTSC Exiting" },
+	{ 15, "CR3-Load Exiting" },
+	{ 16, "CR3-Store Exiting" },
+	{ 19, "CR8-Load Exiting" },
+	{ 20, "CR8-Store Exiting" },
+	{ 21, "Use TPR Shadow" },
+	{ 22, "NMI-Window Exiting" },
+	{ 23, "MOV-DR Exiting" },
+	{ 24, "Unconditional I/O Exiting" },
+	{ 25, "Use I/O Bitmaps" },
+	{ 27, "Monitor Trap Flag" },
+	{ 28, "Use MSR Bitmaps" },
+	{ 29, "MONITOR Exiting" },
+	{ 30, "PAUSE Exiting" },
+	{ 31, "Activate Secondary Controls" }
+};
+
+/*
+ * Secondary Processorbased capabilities
+ * See SDM volume 3, section 24.6.2
+ */
+struct capability_info secondaryprocbased[23] =
+{
+	{ 0, "Virtualize APIC Accesses" },
+	{ 1, "Enable EPT" },
+	{ 2, "Descriptor-Table Exiting" },
+	{ 3, "Enable RDTSCP" },
+	{ 4, "Virtualize x2APIC Mode" },
+	{ 5, "Enable VPID" },
+	{ 6, "WBINVD Exiting" },
+	{ 7, "Unrestricted Guest" },
+	{ 8, "APIC-Register Virtualization" },
+	{ 9, "Virtual-Interrupt Delivery" },
+	{ 10, "PAUSE-Loop Exiting" },
+	{ 11, "RDRAND Exiting" },
+	{ 12, "Enable INVPCID" },
+	{ 13, "Enable VM Functions" },
+	{ 14, "VMCS Shadowing" },
+	{ 15, "Enable ENCLS Exiting" },
+	{ 16, "RDSEED Exiting" },
+	{ 17, "Enable PML" },
+	{ 18, "EPT-Violation #VE" },
+	{ 19, "Conceal VMX Non-Root Operation From Intel PT" },
+	{ 20, "Enable XSAVES/XRSTORS" },
+	{ 22, "Mode-based Execute Control For EPT" },
+	{ 25, "Use TSC Scaling" }
+};
+
+/*
+ * VM-Exit capabilities
+ * See SDM volume 3, section 24.7
+ */
+struct capability_info vmexit[11] =
+{
+	{ 2, "Save Debug Controls" },
+	{ 9, "Host Address-Space Size" },
+	{ 12, "Load IA32_PERF_GLOBAL_CTRL" },
+	{ 15, "Acknowledge Interrupt On Exit" },
+	{ 18, "Save IA32_PAT" },
+	{ 19, "Load IA32_PAT" },
+	{ 20, "Save IA32_EFER" },
+	{ 21, "Load IA32_EFER" },
+	{ 22, "Save VMX-preemption Timer Value" },
+	{ 23, "Clear IA32_BNDCFGS" },
+	{ 24, "Conceal VM Exits from Intel PT" }
+};
+
+/*
+ * VM-Entry capabilities
+ * See SDM volume 3, section 24.8
+ */
+struct capability_info vmentry[9] =
+{
+	{ 2, "Load Debug Controls" },
+	{ 9, "IA-32e Mode Guest" },
+	{ 10, "Entry to SMM" },
+	{ 11, "Deactivate Dual-Monitor Treatment" },
+	{ 13, "Load IA32_PERF_GLOBAL_CTRL" },
+	{ 14, "Load IA32_PAT" },
+	{ 15, "Load IA32_EFER" },
+	{ 16, "Load IA32_BNDCFGS" },
+	{ 17, "Conceal VM Entries from Intel PT" }
+};
+
+/*
+ * report_capability
+ *
+ * Reports capabilities present in 'cap' using the corresponding MSR values
+ * provided in 'lo' and 'hi'.
+ *
+ * Parameters:
+ *  cap: capability_info structure for this feature
+ *  len: number of entries in 'cap'
+ *  lo: low 32 bits of capability MSR value describing this feature
+ *  hi: high 32 bits of capability MSR value describing this feature
+ */
+void
+report_capability(struct capability_info *cap, uint8_t len, uint32_t lo,
+    uint32_t hi)
+{
+	uint8_t i;
+	struct capability_info *c;
+	char msg[MAX_MSG];
+
+	memset(msg, 0, sizeof(msg));
+
+	for (i = 0; i < len; i++) {
+		c = &cap[i];
+		snprintf(msg, 79, "  %s: Can set=%s, Can clear=%s\n",
+		    c->name,
+		    (hi & (1 << c->bit)) ? "Yes" : "No",
+		    !(lo & (1 << c->bit)) ? "Yes" : "No");
+		printk(msg);
+	}
+}
+
+/*
+ * check_true_controls
+ *
+ * Check if true controls are available
+ * 
+ * Return Values:
+ * Returns boolean value true or false.
+ */
+bool
+check_true_controls(void)
+{
+	uint32_t lo, hi;
+
+	/* True controls */
+	rdmsr(IA32_VMX_BASIC, lo, hi);
+	pr_info("\nTrue Controls MSR: 0x%llx\n",
+		(uint64_t)(lo | (uint64_t)hi << 32));
+
+	return (hi & (1 << 23));
+}
+
+/*
+ * check_sec_proc_ctrls
+ *
+ * Check if "Activate Secondary Controls"(bit 31 in Primary procbased controls) is set
+ *
+ * Parameters:
+ * hi: high 32 bits of capability MSR value describing this feature
+ * 
+ * Return Values:
+ * Returns boolean value true or false.
+ */
+bool
+check_sec_proc_ctrls(uint32_t hi)
+{
+	return (hi & (1 << 31));
+
+}
+
+/*
+ * detect_vmx_features
+ *
+ * Detects and prints VMX capabilities of this host's CPU.
+ */
+void
+detect_vmx_features(bool true_ctrls)
+{
+	uint32_t lo, hi;
+	if(!true_ctrls)
+	{
+		/* Pinbased controls */
+		rdmsr(IA32_VMX_PINBASED_CTLS, lo, hi);
+		pr_info("\nPinbased Controls MSR: 0x%llx\n",
+			(uint64_t)(lo | (uint64_t)hi << 32));
+		report_capability(pinbased, 5, lo, hi);
+	
+		/* Primary Procbased Controls */
+		rdmsr(IA32_VMX_PROCBASED_CTLS, lo, hi);
+		pr_info("\nPrimary Procbased Controls MSR: 0x%llx\n",
+			(uint64_t)(lo | (uint64_t)hi << 32));
+		report_capability(primaryprocbased, 21, lo, hi);
+
+		if(check_sec_proc_ctrls(hi))
+		{
+			/* Secondary Procbased Controls */
+			rdmsr(IA32_VMX_PROCBASED_CTLS2, lo, hi);
+			pr_info("\nSecondary Procbased Controls MSR: 0x%llx\n",
+				(uint64_t)(lo | (uint64_t)hi << 32));
+			report_capability(secondaryprocbased, 23, lo, hi);
+		}
+
+		/* Exit Controls */
+		rdmsr(IA32_VMX_EXIT_CTLS, lo, hi);
+		pr_info("\nVM-Exit Controls MSR: 0x%llx\n",
+			(uint64_t)(lo | (uint64_t)hi << 32));
+		report_capability(vmexit, 11, lo, hi);
+
+		/* Entry Controls */
+		rdmsr(IA32_VMX_ENTRY_CTLS, lo, hi);
+		pr_info("\nVM-Entry Controls MSR: 0x%llx\n",
+			(uint64_t)(lo | (uint64_t)hi << 32));
+		report_capability(vmentry, 9, lo, hi);
+	}
+	else
+	{
+		/** For true controls **/
+		/* Pinbased controls */
+		rdmsr(IA32_VMX_TRUE_PINBASED_CTLS, lo, hi);
+		pr_info("\nPinbased True Controls MSR: 0x%llx\n",
+			(uint64_t)(lo | (uint64_t)hi << 32));
+		report_capability(pinbased, 5, lo, hi);
+	
+		/* Primary Procbased Controls */
+		rdmsr(IA32_VMX_TRUE_PROCBASED_CTLS, lo, hi);
+		pr_info("\nPrimary Procbased True Controls MSR: 0x%llx\n",
+			(uint64_t)(lo | (uint64_t)hi << 32));
+		report_capability(primaryprocbased, 21, lo, hi);
+
+		if(check_sec_proc_ctrls(hi))
+		{
+			/* Secondary Procbased Controls */
+			rdmsr(IA32_VMX_PROCBASED_CTLS2, lo, hi);
+			pr_info("\nSecondary Procbased True Controls MSR: 0x%llx\n",
+				(uint64_t)(lo | (uint64_t)hi << 32));
+			report_capability(secondaryprocbased, 23, lo, hi);
+		}
+
+		/* Exit Controls */
+		rdmsr(IA32_VMX_TRUE_EXIT_CTLS, lo, hi);
+		pr_info("\nVM-Exit True Controls MSR: 0x%llx\n",
+			(uint64_t)(lo | (uint64_t)hi << 32));
+		report_capability(vmexit, 11, lo, hi);
+
+		/* Entry Controls */
+		rdmsr(IA32_VMX_TRUE_ENTRY_CTLS, lo, hi);
+		pr_info("\nVM-Entry True Controls MSR: 0x%llx\n",
+			(uint64_t)(lo | (uint64_t)hi << 32));
+		report_capability(vmentry, 9, lo, hi);
+	}
+}
+
+/*
+ * init_module
+ *
+ * Module entry point
+ *
+ * Return Values:
+ *  Always 0
+ */
+int
+init_module(void)
+{
+	bool true_ctrls;
+
+	printk(KERN_INFO "CMPE 283 Assignment 1 Module Start\n");
+	true_ctrls = check_true_controls();
+
+	if (true_ctrls)
+	{
+		printk("True controls are available in this system.");
+	}
+	else
+	{
+		printk("True controls are not available in this system.");
+	}
+	
+	detect_vmx_features(true_ctrls);
+
+	/* 
+	 * A non 0 return means init_module failed; module can't be loaded. 
+	 */
+	return 0;
+}
+
+/*
+ * cleanup_module
+ *
+ * Function called on module unload
+ */
+void
+cleanup_module(void)
+{
+	printk(KERN_INFO "CMPE 283 Assignment 1 Module Exits\n");
+}
